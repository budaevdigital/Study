"""
Вы участвуете в разработке уникальной технологии для театров: «Веб-суфлёр».
С помощью этой технологии суфлёр может отправлять подсказки актёрам через Интернет, а не из суфлёрской будки на сцене.
Текст будет появляться бегущей строкой на экране, направленном к актёрам и невидимом для зрителей.

Программистам тоже нужны подсказки.
Ваша задача — оформить понятную другим разработчикам документацию в Swagger.

Создайте три примера запросов с репликами актёров.

Каждый пример должен называться по имени произведения.

Произведение: «Колобок».
Актёр: «Медведь».
Реплика: «Колобок, колобок, я тебя съем!»

Произведение: «Гамлет, принц датский».
Актёр: «Гамлет».
Реплика: «Бедный Йорик! Я знал его, Горацио.»

Произведение: «Палата номер 6».
Актёр: «Рагин».
Реплика: «Покой и довольство человека не вне его, а в нём самом.»

Примеры запросов расположите в классе PrompterHint.

Названия произведений должны появиться в выпадающем списке — используйте поле summary.

В поле value должен быть словарь с двумя ключами: actor и replica.
"""
from enum import Enum
from fastapi import FastAPI, Body
from pydantic import BaseModel
import uvicorn

app = FastAPI(redoc_url=None)


class HeroesEnum(str, Enum):
    MEDVED = "Медведь"
    GAMLET = "Гамлет"
    RAGIN = "Рагин"


class PrompterHint(BaseModel):
    actor: HeroesEnum
    replica: str

    class Config:
        title = "Реплики героев"
        min_anystr_length = 10
        schema_extra = {
            "examples": {
                "medved": {
                    "summary": "Колобок",
                    "description": "Реплика актера: Медведь",
                    "value": {
                        "actor": "Медведь",
                        "replica": "Колобок, колобок, я тебя съем!",
                    },
                },
                "gamlet": {
                    "summary": "Гамлет, принц датский",
                    "description": "Реплика актера: Гамлет",
                    "value": {
                        "actor": "Гамлет",
                        "replica": "Бедный Йорик! Я знал его, Горацио",
                    },
                },
                "ragin": {
                    "summary": "Палата номер 6",
                    "description": "Реплика актера: Рагина",
                    "value": {
                        "actor": "Рагин",
                        "replica": (
                            "Покой и довольство человека "
                            "не вне его, а в нём самом."
                        ),
                    },
                },
            }
        }


@app.post("/")
def replicas_heroes(
    replicas: PrompterHint = Body(
        ..., examples=PrompterHint.Config.schema_extra["examples"]
    )
) -> dict[str, str]:
    return {"result": "Диалог для героя принят на рассмотрение"}


if __name__ == "__main__":
    uvicorn.run(f"{__name__}:app", reload=True)
